ENCAPSULATION : Wrapping up of data and methods together is known as encapsulation. best example is class.Encapsulation is hiding the implementation of a class
behind a well defined interface.Encapsulation helps us to change implementation of a class without breaking other code.
(or)
It refers to the bundling of data (variables) and methods (functions) that operate on that data into a single unit, or class Encapsulation also involves 
restricting direct access to some of an object's components, which is a means of preventing accidental interference and misuse of the data. Instead,
access to the data is typically provided through public methods, often referred to as getters and setters.

Benefits of Encapsulation
Control: Encapsulation provides control over the data by allowing you to define how it should be accessed and modified.
Flexibility: It allows the internal implementation of a class to be changed without affecting the code that uses the class.
Maintainability: Encapsulated code is easier to maintain and understand.
Security: It helps protect the integrity of the data by preventing unauthorized access and modification.

To achieve encapsulation in Java −
  -Declare the variables of a class as private.
  -Provide public setter and getter methods to modify and view the variables values.

ABSTRACTION:  hiding the complex implementation details and showing only the essential features of an object. The main purpose of abstraction is to reduce
complexity and allow the programmer to focus on interactions at a higher level.

Abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user.
In other words, the user will have the information on what the object does instead of how it does it.

Abstraction is achieved in 2 ways:
 -Abstract class  -----classes that cannot be instantiated on their own and must be subclassed
 -Interfaces (Pure Abstraction)---contract of methods that a class must implement without providing the implementation itself.

Abstract Class:
 An abstract class must be declared with an abstract keyword.
 It can have abstract and non-abstract methods.
 It cannot be instantiated.
 It can have constructors and static methods also.
 It can have final methods which will force the subclass not to change the body of the method.

Interfaces:
  All the fields in interfaces are public, static and final by default.
 All methods are public & abstract by default.
 A class that implements an interface must implement all the methods declared in the
interface.
 Interfaces support the functionality of multiple inheritance

if class is abstract,not mandatory to have abstract method
if abstract method implemented ,class should be abstract

POLYMORPHISM:
Polymorphism is the ability to present the same interface for differing underlying forms (data types).With polymorphism, each of these classes will have different
underlying data. Precisely, Poly means‘many’ and morphism means ‘forms’.
Types of Polymorphism IMP
1. Compile Time Polymorphism (Static)
2. Runtime Polymorphism (Dynamic

Compile Time Polymorphism: The polymorphism which is implemented at the compile time is known as compile-time polymorphism. Example - Method Overloading
Method Overloading: Method overloading is a technique which allows you to have morethan one function with the same function name but with different functionality.
Method overloading can be possible on the following basis:
1. The return type of the overloaded function.
2. The type of the parameters passed to the function.
3. The number of parameters passed to the function.

Runtime Polymorphism: Runtime polymorphism is also known as dynamic polymorphism.Function Overriding is an example of runtime polymorphism.
Function Overriding means when the child class contains the method which is already present in the parent class. Hence, the child class overrides 
the method of the parent class. In case of function overriding, parent and child classes both contain the same function with a different definition. 
The call to the function is determined at runtime is known as runtime polymorphism

INHERITENCE:
Inheritance can be defined as the process where one class acquires the properties (methods andfields) of another. With the use of inheritance, the information
is made manageable in a hierarchical order.The class which inherits the properties of other is known as subclass (derived class, child class) and the class whose 
properties are inherited is known as superclass (base class, parent class).

Types of inheritance in Java
On the basis of class, there can be three types of inheritance in java: single, multilevel and   hierarchical.
In java programming, multiple and hybrid inheritance is supported through interface only.

Types of Inheritance
Single Inheritance: A class inherits from one superclass.
Multilevel Inheritance: A class inherits from a subclass, forming a chain.
Hierarchical Inheritance: Multiple classes inherit from a single superclass.
Multiple Inheritance: A class inherits from more than one superclass (not directly supported in Java, but can be achieved using interfaces).

why multiple inheritence not allowed in java?
Multiple inheritance, where a class can inherit from more than one class, is not allowed in Java to avoid complexity and ambiguity that can arise from it
when a class inherits from two classes that both inherit from a common superclass. This can lead to ambiguity in which version of a method from the 
common superclass should be inherited.

EXCEPTIONAL HANDLING:
Exception handling in Java is a powerful mechanism to handle runtime errors, ensuring the normal flow of the program's execution. An exception is an event that 
disrupts the normal flow of the program. In Java, exceptions are objects that describe an exceptional (erroneous) condition that has occurred in a piece of code.

Key Concepts of Exception Handling
Try Block: The code that might throw an exception is placed inside the try block.
Catch Block: The code that handles the exception is placed inside the catch block.
Finally Block: This block is executed after the try and catch blocks, regardless of whether an exception was thrown or not.
Throw: Used to explicitly throw an exception.
Throws: Used in method signatures to declare the exceptions that a method can throw.

STRING BUFFER AND BUILDER:
In Java, StringBuffer and StringBuilder are classes used to create mutable (modifiable) sequences of characters. Both are alternatives to the String class 
when frequent modifications to strings are needed, as String objects are immutable.

StringBuffer is synchronized, meaning it is thread-safe and can be used safely in a multi-threaded environment. Synchronization ensures that only one thread 
can modify the StringBuffer object at a time.
StringBuilder is not synchronized, making it faster and more efficient than StringBuffer in single-threaded scenarios, but it is not thread-safe.

StringBuilder is faster than StringBuffer because it does not have the overhead of synchronization.

HOW TO CREATE IMMUTABLE CLASS IN JAVA
Creating an immutable class in Java means designing a class whose instances cannot be modified after they are created. Immutable objects are inherently 
thread-safe,as their state cannot change once they are constructed. Here's how to create an immutable class in Java:

Steps to Create an Immutable Class
 Declare the class as final so it cannot be subclassed.
 Make all fields private and final to ensure that their values cannot be modified after the object is constructed.
 Provide a constructor that initializes all the fields.
 Do not provide setters for any fields.
 Ensure that mutable objects are not directly accessible from outside the class. This can be achieved by:
 Returning copies of mutable objects rather than the objects themselves.
 Ensuring that any passed mutable objects are not modified after being used to construct the immutable object.

SERIALIZATION:
 Serialization in Java is the process of converting an object's state into a byte stream so that the byte stream can be reverted back into a copy of the object.
 This process allows objects to be easily saved to files, sent over a network, or transferred between different components in a system.

Key Concepts:
 Serializable Interface: An object can be serialized if its class or any of its superclasses implements the java.io.Serializable interface.
 This is a marker interface, which means it does not contain any methods.

 ObjectOutputStream and ObjectInputStream: These classes are used to write objects to and read objects from streams, respectively.

 SerialVersionUID: This is a unique identifier for each Serializable class. It is used during deserialization to ensure that a loaded class corresponds exactly 
  to a serialized object. If no matching class is found, an InvalidClassException is thrown.

== OPERATOR AND .EQULAS METHOD DIFFERECNCE:
The == operator is used to compare primitive data types and object references in Java.
When used with primitive data types (such as int, double, char, etc.), == checks if the values of the variables are equal
When used with objects (non-primitive types), == compares the memory addresses (references) of the objects. It checks whether two object references point 
to the same memory location.

The .equals() method is used to compare the content or values of objects in Java. It is a method defined in the Object class and is overridden by most classes 
to provide meaningful comparison based on the content of the objects.

== is used for reference comparison, while .equals() is used for content comparison.

JDK VS JRE VS JVM:
JVM (Java Virtual Machine)
  Purpose: Executes Java bytecode.
  Functionality: Provides platform independence, handles bytecode interpretation, just-in-time (JIT) compilation, and memory management (garbage collection).
  Components: Includes the bytecode verifier, interpreter, and JIT compiler.
  Contains: JVM alone does not include any development tools or libraries.
JRE (Java Runtime Environment)
  Purpose: Provides the environment to run Java applications.
  Functionality: Includes the JVM along with core libraries and other components needed to run Java applications.
  Components: Consists of the JVM, core libraries, and supporting files.
  Contains: All necessary components to run Java applications but no development tools like compilers.
JDK (Java Development Kit)
  Purpose: Provides tools to develop and run Java applications.
  Functionality: Includes the JRE and additional development tools.
  Components: Consists of the JRE, compilers (javac), debuggers, documentation tools, and other tools necessary for Java development.
  Contains: Everything in the JRE plus tools for development.
Summary
  JVM: Executes bytecode, ensuring Java's platform independence.
  JRE: Contains JVM and libraries to run Java applications.
  JDK: Includes JRE and tools for developing Java applications (e.g., compiler, debugger).

WHAT IS PLATFORM INDEPENDENT:
 Platform independence in Java means that Java applications can run on any operating system or hardware that has a compatible Java Virtual Machine (JVM). This is achieved by compiling Java source code into
 bytecode, which the JVM interprets and executes, ensuring that the same compiled Java program can run on different platforms without modification.

WHAT IS CASTING AND ITS TYPES OF CASTING:
Casting in Java is the process of converting a variable from one data type to another. There are two main types of casting:
Primitive Type Casting:
  Widening (implicit, no data loss)-Automatically converts a smaller data type to a larger data type-Example: int to long, float to double.
  Narrowing (explicit, potential data loss)-Manually converts a larger data type to a smaller data type-Example: double to float, long to int.

Reference Type Casting:
  Upcasting (implicit, safe)-Converts a subclass type to a superclass type.-Example: Dog to Animal.
  Downcasting (explicit, requires type check, potential for ClassCastException)-Converts a superclass type to a subclass type-Example: Animal to Dog.
                   - Explicit and requires type checking (using instanceof).
                   - Can throw ClassCastException if the object is not actually of the subclass type.

WHAT ARE WRAPPER CLASSES AND ITS TYPES:
  Wrapper classes in Java provide a way to use primitive data types (like int, char, etc.) as objects. Each primitive type has a corresponding wrapper class in the java.lang package.
  Wrapper classes in Java convert primitive data types into objects, allowing them to be used in contexts where objects are required, such as collections or generics. 
  The types include Byte, Short, Integer, Long, Float, Double, Character, and Boolean.


DIFFERENCE BETWEEN CHECKED AND UNCHECKED EXCEPTIONS:
Checked Exceptions:
  Definition: Exceptions that are checked at compile-time.
  Handling Requirement: Must be either caught or declared in the method signature using throws.
  Examples: IOException, SQLException.
  Usage: Typically used for recoverable conditions and external issues (e.g., file I/O, database access).
Unchecked Exceptions:
  Definition: Exceptions that are not checked at compile-time.
  Handling Requirement: Do not need to be caught or declared thrown.
  Examples: NullPointerException, ArrayIndexOutOfBoundsException, ArithmeticException.
  Usage: Typically used for programming errors (e.g., logic errors, improper use of API).
Summary:
  Checked Exceptions: Must be handled or declared, used for recoverable issues, checked at compile-time.
  Unchecked Exceptions: Do not need to be handled or declared, used for programming errors, checked at runtime.

WHAT IS AN ENUM:
It is a special data type that represents a group of constants. It is used to define collections of constants in a type-safe manner.
    Definition: A type that consists of a fixed set of constants (e.g., days of the week, directions, etc.).
    Usage: Improves code readability and safety by providing meaningful names for fixed values.
public enum Day {
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY
}

SINGLETON CLASS:
A Singleton class in Java ensures that only one instance of the class is created and provides a global point of access to that instance.
   Single Instance: Only one instance of the class is created throughout the application's lifecycle.
   Global Access: The single instance is globally accessible.
   Usage: Commonly used in scenarios where a single object is needed to coordinate actions across the system (e.g., configuration settings, logging).

public class Singleton {
    private static Singleton instance;

    private Singleton() {
        // private constructor to prevent instantiation
    }

    public static synchronized Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}

CAN YOU OVERRIDE A PRIVATE METHOD IN JAVA:
No, you cannot override a private method in Java. Private methods are not accessible outside the class in which they are declared, so they cannot be overridden by subclasses.

WILL FINALLY BLOCK EXECUTE IF YOU PUT Sysytem.exit() in try or catch block:
   No, the finally block will not execute if System.exit() is called within the try or catch block. When System.exit() is invoked, it immediately terminates the JVM and bypasses any remaining code execution, 
   including the finally block.

WHY DO WE NEED IMMUTABLE IN JAVA:
Immutable objects in Java are beneficial because they provide the following advantages:
Thread Safety: Immutable objects are inherently thread-safe because their state cannot be changed after creation, eliminating the need for synchronization.
Concurrent Access: Immutable objects can be shared among multiple threads without risk of data corruption, making concurrent programming simpler.
Cacheability: Immutable objects can be cached effectively because their state cannot change, leading to performance improvements in memory-constrained environments.
Security: Immutable objects are less prone to security vulnerabilities such as tampering or injection attacks because their state cannot be modified.
Simplicity: Immutable objects simplify code by eliminating the need for defensive copying or synchronization mechanisms, leading to cleaner and more maintainable code.

EXPLAIN THE DESIGN PATTERNS AVAILABLE IN JAVA
Design patterns in Java are reusable solutions to common problems encountered during software development.

Creational Patterns:
Singleton: Ensures that a class has only one instance and provides a global point of access to it.
Factory Method: Defines an interface for creating objects but allows subclasses to alter the type of objects that will be created.
Builder: Separates the construction of a complex object from its representation, allowing the same construction process to create different representations.

Structural Patterns:
Adapter: Allows incompatible interfaces to work together by converting the interface of a class into another interface clients expect.
Decorator: Adds new functionality to an object dynamically without altering its structure.
Facade: Provides a simplified interface to a set of interfaces in a subsystem, making it easier to use.

Behavioral Patterns:
Observer: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.
Template Method: Defines the skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.

WHAT ARE GENERICS IN JAVA AND WHY WE ARE USING THAT.
 Generics in Java allow you to create classes, interfaces, and methods that operate on types specified at compile time. They cc and enable code reusability by allowing 
 classes and methods to work with any data type.

Key Points:
  Type Safety: Generics ensure that operations are type-safe at compile time, reducing the risk of runtime errors.
  Code Reusability: Generics enable you to write reusable code that can work with different types without duplication.
  Compile-Time Checks: Type parameters are checked at compile time, providing early detection of type-related errors.
  Eliminates Casting: Generics reduce the need for explicit casting, making code cleaner and easier to read.

// Generic class
class Box<T> {
    private T value;
    public void setValue(T value) {
        this.value = value;
    }
    public T getValue() {
        return value;
    }
}

// Usage
Box<Integer> intBox = new Box<>();
intBox.setValue(10);
int value = intBox.getValue(); // No casting required

EXPALIN SPRING CONSTANT POOL IN JAVA;
  In Java, the constant pool is a table of symbolic references used by the JVM to store string literals, class and interface names, method and field names, and other constants. 
  It's a part of the class file format and is loaded into memory when a class is loaded by the JVM. The constant pool facilitates efficient memory management and runtime optimizations 
  by storing and reusing frequently used constants throughout the program.

WHAT IS STRING CLASS AND ITS IMMUTABLE NATURE IN JAVA
  The String class in Java represents a sequence of characters. It is widely used for text manipulation and processing. In Java, strings are immutable, meaning once created,
  their values cannot be changed. This immutability ensures thread safety, enhances security, and simplifies memory management. Any operation that appears to modify a string actually 
  creates a new string object with the modified value, leaving the original string unchanged.

MULTITHREADING IN JAVA:
Multithreading in Java refers to the ability of a program to execute multiple threads concurrently. Threads are lightweight processes that execute independently within a program, 
allowing tasks to be performed simultaneously. Multithreading enables efficient utilization of CPU resources and improves responsiveness by allowing programs to perform multiple 
tasks concurrently. It is commonly used in applications that require parallel execution of tasks, such as web servers, GUI applications, and background processing.


LIFE CYCLE OF A THREAD:
1.New: The thread is created but not yet started.
2.Runnable: The thread is ready to run and waiting for CPU time.
3.Running: The thread is executing its task.
4.Blocked/Waiting: The thread is temporarily inactive, waiting for a resource or condition to continue.
5.Terminated: The thread has finished its execution or has been stopped.

WAYS TO CREATE A THREAD IN JAVA:
Extending the Thread class:
  Define a class that extends the Thread class and override the run() method to define the thread's behavior.
  Instantiate the class and call the start() method to begin execution.

Implementing the Runnable interface:
  Define a class that implements the Runnable interface and implements the run() method to define the thread's behavior.
  Create an instance of the class and pass it to a Thread object as a parameter.
  Call the start() method on the Thread object to begin execution.

Using lambda expressions (Java 8 and later):
  Create a Thread object and pass a lambda expression or method reference defining the thread's behavior to the constructor.
  Call the start() method on the Thread object to begin execution.

HIERARACHY OF THE EXCEPTION HANDLING CLASSES:
Throwable:
  Root class for all exceptions and errors.

Error:
  Represents serious problems that are usually not recoverable by the application, such as OutOfMemoryError or StackOverflowError.

Exception:
  Represents exceptional conditions that are recoverable by the application.

RuntimeException:
  Represents exceptions that occur at runtime and are not checked by the compiler, such as NullPointerException or IndexOutOfBoundsException.

Checked Exceptions:
  Subclasses of Exception that must be declared in the method signature or handled using a try-catch block.
  Examples include IOException, SQLException, etc.

Unchecked Exceptions:
  Subclasses of RuntimeException that do not need to be declared or caught explicitly.
  Examples include NullPointerException, ArrayIndexOutOfBoundsException, etc.

DIFFERENCE BETWEEN STATIC METHOD AND INSTANCE METHOD IN JAVA

Static Method:
Associated with the class rather than instances of the class.
Can be called directly using the class name.
Cannot access instance variables directly.
Often used for utility methods or operations that do not depend on instance state.

Instance Method:
Associated with instances of the class.
Must be called on an instance of the class.
Can access instance variables and other instance methods directly.
Often used to manipulate the state of individual objects and perform instance-specific operations.

WHAT ARE THE MEMORY STORAGES AVAILABLE IN JVM:
Heap Memory:
 Used for storing objects and their corresponding instance variables.
 Managed by garbage collection to reclaim unused memory.

Stack Memory:
 Stores method invocations and local variables.
 Each thread has its own stack, which is created when the thread is started and destroyed when it terminates.

Method Area (PermGen/Metaspace):
 Stores class metadata, static variables, and method bytecode.
 PermGen (Permanent Generation) was used in older JVM versions; Metaspace is its replacement in modern JVMs.

Program Counter (PC) Register:
Stores the address of the currently executing instruction.
Each thread has its own PC register.

 differences between ArrayList and LinkedList:
ArrayList provides constant-time positional access, but inserting or removing elements from the middle involves O(n) time. 
LinkedList provides O(1) time insertions and deletions, but positional access requires O(n) time

transient keyword in Java:it is  used to indicate that a field should not be serialized during the serialization process.
difference between == and equals() in Java:
== checks for reference equality, whereas equals() checks for value equality

Explain how Java achieves platform independence:
Java achieves platform independence through the use of the Java Virtual Machine (JVM), which abstracts the underlying operating system and hardware,
allowing Java bytecode to run on any platform with a compatible JVM.


purpose of the static keyword in Java:
The static keyword denotes that a field, method, or nested class belongs to the class itself rather than instances of the class

concept of a Java Reflection API:
The Reflection API allows inspection and manipulation of classes, fields, methods, and constructors at runtime,
enabling dynamic code execution and metadata analysis.

What are Java annotations? Give examples of commonly used annotations:
annotations provide metadata for Java code. Common annotations include @Override, @Deprecated, @SuppressWarnings, @FunctionalInterface, and custom annotations.

What are checked and unchecked exceptions:
Checked exceptions are checked at compile-time and must be handled or declared in the method signature (e.g., IOException).
Unchecked exceptions are not checked at compile-time and include runtime exceptions (e.g., NullPointerException)

difference between String, StringBuilder, and StringBuffer:
String is immutable. StringBuilder is mutable and non-synchronized, offering better performance for single-threaded scenarios.
StringBuffer is mutable and synchronized, suitable for multi-threaded scenarios

super and this keywords in Java:
super refers to the superclass of the current object and is used to call superclass methods and constructors.
this refers to the current object and is used to access class members and constructors

 difference between synchronized and Lock in Java:
synchronized is a keyword that locks the method or block it is applied to, while Lock is a more flexible and powerful interface 
that provides explicit lock control with methods like lock, tryLock, and unlock.

Explain the concept of thread safety and ways to achieve it in Java:
Thread safety ensures that shared data is accessed and modified by multiple threads in a controlled manner. 
It can be achieved using synchronized blocks, locks, atomic variables, and concurrent collections.

What is the ExecutorService and how is it used:
ExecutorService is part of the java.util.concurrent package and provides methods to manage a pool of threads, 
submit tasks, and handle their execution and termination.

Describe Callable and Future in Java:
Callable is an interface similar to Runnable but allows returning a result and throwing checked exceptions. 
Future represents the result of an asynchronous computation and provides methods to check its status and retrieve the result.

differences between wait, notify, and notifyAll:
wait makes the current thread release the lock and wait until another thread calls notify or notifyAll. 
notify wakes up a single waiting thread, while notifyAll wakes up all waiting threads

Explain OOP Principles.
Answer: Object-Oriented Programming (OOP) principles include:
Encapsulation: Bundling the data (variables) and code (methods) together into a single unit, e.g., a class.
Inheritance: Deriving new classes from existing ones, promoting code reusability.
Polymorphism: Ability to process objects differently based on their data type or class.
Abstraction: Hiding the implementation details from the user, only showing the functionality.

 concept of "static" in Java:
static keyword is used for memory management. It can be applied to variables, methods, blocks, and nested classes. Static members belong to the class
rather than any instance.

What are the types of exceptions in Java:
Checked Exceptions: These are checked at compile-time (e.g., IOException).
Unchecked Exceptions: These are checked at runtime (e.g., NullPointerException).
Errors: Severe problems that are not meant to be caught by applications (e.g., OutOfMemoryError)

 How does Java handle memory management and garbage collection?
Java uses an automatic garbage collection mechanism to manage memory. The Garbage Collector (GC) frees up memory by removing objects that are no longer reachable.

final, finally, and finalize() keywords.
final: Used to declare constants, prevent method overriding, and inheritance.
finally: A block that is executed after a try-catch block, used for cleanup code.
finalize(): A method used by the Garbage Collector to clean up before reclaiming an object's memory.

What are Java Collections and their benefits?
Java Collections Framework provides a set of classes and interfaces for storing and manipulating groups of data as a single unit. 
Benefits include dynamic sizing, easy access to data, and a variety of data structures like lists, sets, and maps.

What is the difference between ArrayList and LinkedList?
ArrayList: Better for random access due to its backing array.
LinkedList: Better for insertions and deletions as it uses a doubly-linked list.

How does HashMap work in Java?
HashMap uses an array of buckets to store key-value pairs. It uses the hash code of the key to determine the bucket.
Collisions are handled using chaining (linked lists) or probing.

What are the differences between HashMap and Hashtable
HashMap is unsynchronized and allows null keys and values.
Hashtable is synchronized and doesn’t allow null keys or values.


Explain the concept of multithreading in Java.
Multithreading in Java allows concurrent execution of two or more threads. Java provides Thread class and Runnable interface for creating threads.

What is a deadlock and how can it be avoided?
 A deadlock occurs when two or more threads are waiting for each other to release resources, causing them to remain in a blocked state. 
Avoid deadlocks by careful resource management and acquiring locks in a consistent order.

Describe synchronized keyword and its usage:
synchronized ensures that only one thread can access a block of code or an object at a time, preventing race conditions.

What is the volatile keyword in Java?
volatile keyword ensures that the value of a variable is always read from main memory and not from a thread's local cache, 
providing visibility of changes across threads.

Explain the use of Java 8 Stream API.
Stream API provides a functional approach to processing collections of objects with methods like filter, map, reduce, etc.
List<String> names = Arrays.asList("John", "Jane", "Jack");
names.stream().filter(name -> name.startsWith("J")).forEach(System.out::println);

How do you implement a Singleton pattern in Java?
Singleton ensures that only one instance of a class is created. It can be implemented using: Eager Initialization ,Lazy Initialization

 What is the Optional class in Java 8?
Optional is a container object which may or may not contain a non-null value. It helps avoid NullPointerException.

Explain the Functional Interface in Java.
A functional interface is an interface with exactly one abstract method. It can be implemented using lambda expressions.

What are default methods in interfaces?
Default methods are methods in interfaces with an implementation. They provide a way to add new methods to interfaces without breaking existing implementations.

What are the differences between Comparator and Comparable?
Comparable: Defines the natural order of objects via compareTo method.
Comparator: Defines a custom order via compare method.



Java memory management involves two key concepts:

Heap Memory: Where objects are stored. Divided into:
Young Generation: For new objects. Further divided into Eden space and two survivor spaces. Minor Garbage Collection (GC) occurs here frequently.
Old Generation: For long-lived objects. Major GC occurs less frequently.
Metaspace: For class metadata (replaced PermGen in Java 8).

Garbage Collection (GC): Automatic process of reclaiming memory by deleting unreachable objects. Main algorithms include:
Serial GC: Single-threaded, suitable for small applications.
Parallel GC: Multi-threaded for young generation, single-threaded for old generation.
Concurrent Mark-Sweep (CMS): Minimizes pauses by working concurrently with application threads.
G1 (Garbage-First) GC: For large heaps, aims to meet pause time goals and handles memory in regions.


Comparable - compareTo -  natural order
Comparator -compare -custom order
default methods -add new methods to interfaces
Functional Interface -one abstract method
Optional class -avoid NullPointerException
Singleton pattern -only one instance of a class
Stream API -processing collections of objects
volatile keyword -always read from main memory
synchronized keyword-only one thread can access a block of code
deadlock -infinite waiting
multithreading -executing multiple threads
HashMap is unsynchronized and allows null keys and values.
Hashtable is synchronized and doesn’t allow null keys or values.
HashMap work -array of buckets,hash code to determine bucket
ArrayList: Better for random access due to its backing array.
LinkedList: Better for insertions and deletions as it uses a doubly-linked list
finalize() -Garbage Collector to clean up
encapsulation - bind method and data
inhertance - acquire parent properties
method overloading - same name - diff params 
mthod overriding - same name -same params -super and sub class
abstract class - both absract and non abstract methods
interface - non abstract methods
multiple inheritence-inherit from more than one class
Exception handling-to handle runtime errors
try - might throw an exception
catch-handles the exception
finally -clean and close
throw -explicitly throw an exception
throws-declare the exceptions
SERIALIZATION - object's  into a byte stream
CASTING -one data type to another
Widening -smaller data type to a larger data type
Narrowing - larger data type to a smaller data type
Upcasting-subclass type to a superclass type
Downcasting-superclass type to a subclass
Wrapper classes - primitive data types into objects
enum -group of constants
Singleton class -that only one instance of the class
Singleton -only one instance
Factory-Defines an interface for creating objects
Builder-Separates the construction of a complex object
Adapter-interface of a class into another interface
Decorator-Adds new functionality
facade - Provides a simplified interface
obsrever-Defines a one-to-many dependency between objects
Strategy-Defines a family of algorithms
Template Method: Defines the skeleton of an algorithm
generics-Template Method: Defines the skeleton of an algorithm
new - created
runnable - ready
running -executing
Blocked/Waiting - inactive
terminated-stopped
create thread:
extending thread class
implementing runnable
method area - static varibles
heap - instance variables
stack - local variables
pc - instructions
Static Method - belongs to class
instance method - belongs to object
Java annotations -metadata for Java code
Java Reflection API -inspection and manipulation
static keyword-belongs to the class
== checks for reference equality, whereas equals() checks for value equality
thread safety - accessed and modified by multiple threads
synchronized - locks the method or block
Lock -explicit lock control with methods
super- refer parent class variables
this - refer current class variables
string-immutable -threadsafe
stringbuilder - mutable - not thread safe
stringbuffer - mutable - threadsafe
checked - compile - io
unchecked -runtime -arthematic
static -belong to the class
wait-wait until another thread calls notify or notifyAll.
notify-single waiting thread
notifyAll- all waiting threads
Callable - returning a result and throwing checked exceptions
Future -asynchronous computation
ExecutorService - provides methods to manage a pool of threads etc
classLoader-loading class files -(bootstrap,extension,system/application)
packages-grouping related types
local variables-scope of varibles
instance variables -inside class and outside method
JIT - bytecode into instructions
pointers - unsafe and complexity
default constructor - no arguments
parameterized-initilize objects with values
garbage collection -deleting unused objects
marker Interface - without any method 
static block - executed when the class is loaded into the memory
static keyword - class level and share same variable
volatile -will be read from main memory rather than cpu
transient - don't want to make serializable ,you can make it transient
bean life  cycle - started,creates instance,bena destroyed and closed
aggregation- container and contained objects are weakly associated
composition-strongly associated
java APi -collection of pre-built classes and packages
throws clause- method declarations , may throw one or more exceptions
try-with-resources statement-automatically close resources (like files, sockets) 
assert statement work-debugging purposes and checks a boolean expression
 synchronized keyword-control access to shared resources by multiple threads
thread safety.-s without causing data corruption or unexpected behavior.
ObjectInputStream-to deserialize objects
ObjectOutputStream-to serialize objects.
How do you read and write to a file-g FileReader, FileWriter, BufferedReader, and BufferedWriter classes
File class in Java-represent the files and directories of the local file system
purpose of the RandomAccessFile class-reading and writing of files in a random-access manner
How do you check if a file or directory exists in Java-exists() method
FileReader-as a stream of characters
BufferedReader-character-based input stream, buffering characters
FileInputStream- read as a stream of bytes
FileOutputStream-write as a stream of bytes.
JDBC-to interact with relational databases
Connection interface-connection to a relational database
 JDBC driver-to interact with a database
 Statement interface-to execute SQL queries.
 statement - general-purpose access to a database
 PreparedStatement-precompiled SQL statements
 ResultSet-result of a database query
 transaction management-to group one or more SQL statements
 connection pooling-used to manage and reuse database connections
 Batch Processing -s executing multiple SQL statements in a single batch
 reflection-examining or modifying the runtime behavior of applications
 ClassLoader-dynamically loading Java classes at runtime
 concept of annotations-provide metadata about the code
 purpose of the Enum -fixed set of constants
 JavaBeans-reusable software components
  Observer design pattern- maintains a list of its dependents
  Proxy-object controls access to another object
  Spring Framework-open-source framework for building enterprise Java applications
  AOP-Separates cross-cutting concerns like logging and transaction management
  Spring Bean lifecycle-instantiation, population of properties, and initialization
 Spring MVC-k for building web applications
 Spring Boot-configuration and deployment of Spring applications
 Spring AOP- cross-cutting concerns like logging and transaction management
 Auto-configuration-y configures the application based on the JAR dependencies
 Spring Data JPA-data access using the Java Persistence API
 Spring Security-authentication and access control framework for Java applications
 

path -location of .exe files
Classpath - location of bytecode (.class)
Binding-linking of method call to its body
static binding - happens at compile time 
dynamic binding - happens at runtime
Local class-new class inside a particular block
How can you generate random numbers-Using Math.random()

cross join - cartesian product
self join-joined itself on some relation.
join-combine records
inner join-matches in both tables
left join - left and matches from right
right join - right and matches from left
full - matches either left or right


RDBMS-collection of tables
SQl - communicate with db
DB-organized data
DDL -structure change
DML -modify db
DCL-grant and revoke
TCL-commit and rollback

synchronus communication -waits for response from other service(rest template,feign client)
asynchrouns communication - does not wait for response(activemq,rabbitmq,kafka)
synchronization - only one thread is allowed to execute
deadlock -infinite waiting
wait()-relases lock when recives notify and notify all
sleep()- do not release lock until time expires
notify - notify one thread
notifyall - notify all threads
thread priority - precedence execution 
sleep-pauses for specific time
yield-pause and chance to another thread
join-pauses and joins with completes task
content switching -cpu from one thread
start-begin execution
run - called using run method
isdaemon - check thread is daemon or not
createdaemon - using setdaemon
daemon thread - jvm ,background tasks like garbage collection,jvm doesnot wait 
user thread-user,jvm wait
thread scheduler - decides which should run
process -instance of a program 
thread-part of process
design patterns - solve common problems
creational - object creation
structural-larger strucure of classes
behavoiral-communication of classes

factory-define a abstract class or interface for object creation
abstarctfactory-same but without concrete subclasses
singleton -only one object for class created
builder-builds complex object

structural -class and object composition
adaptor -existing class with new interface
proxy - object representing another object
































